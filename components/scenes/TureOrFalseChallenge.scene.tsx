'use client'

import { AnimatePresence, motion } from 'framer-motion'
import React from 'react'

import { type SwipeType, TinderCard } from '~/components/cards/TinderCard'

import { type TrueOrFalseQuestion } from '.prisma/client'

const fakeQuestions: TrueOrFalseQuestion[] = [
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0a',
    imageUrl: 'v1680589315/isthatai/twitter_Frunud3XsAAYLzN_tncsag.jpg',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0b',
    imageUrl: 'v1680591237/isthatai/twitter_FrupVjpXwAMqnLf_qrvxlh.jpg',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0c',
    imageUrl: 'v1680592659/isthatai/aslff_ik2BN5dI6tE_ngizwq.jpg',
    isAiGenerated: false,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0d',
    imageUrl: 'v1680591243/isthatai/twitter_Frupv0zWYAMr6vH_nzvupz.jpg',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0e',
    imageUrl:
      'v1680591296/isthatai/Preview_2023-04-04_at_13.23.27_2x_thh70j.png',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0f',
    imageUrl: 'v1680592659/isthatai/ho7e8JYEo3w_c_a_tmjfz8.jpg',
    isAiGenerated: false,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0g',
    imageUrl: 'v1680592888/isthatai/az01fffaszx-00355-3543856038_mx5ytx.png',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0h',
    imageUrl: 'v1680592933/isthatai/fooizxffa-saf00046-1647037626_uwjsxb.png',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0i',
    imageUrl: 'v1680592963/isthatai/lxzasf-FsJXJ1gWYAELOSF_f9sibh.jpg',
    isAiGenerated: true,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0j',
    imageUrl: 'v1680593331/isthatai/sllzxf-oZruO3BLdgY_yphgnr.jpg',
    isAiGenerated: false,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0k',
    imageUrl: 'v1680593331/isthatai/xasfokssaflkj-SKGZlBmRtYY_k9iwyt.jpg',
    isAiGenerated: false,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
  {
    id: 'ckqj2q0x0000k0a6x9x2q7q0l',
    imageUrl: 'v1680593331/isthatai/safjlzx-asfaslfkk2uatp_87tQ_kmkxqe.jpg',
    isAiGenerated: false,
    trueOrFalseChallengeId: 'ckqj2q0x0000k0a6x9x2q7q0a',
  },
]

export function TrueOrFalseChallengeScene() {
  const [index, setIndex] = React.useState(fakeQuestions.length - 1)
  const [questions, setQuestions] = React.useState(fakeQuestions)
  const [score, setScore] = React.useState(0)
  const onSwiped = React.useCallback(
    (index: number, swipe: SwipeType) => {
      if (
        (swipe === 'yes' && questions[index]?.isAiGenerated) ||
        (swipe === 'no' && !questions[index]?.isAiGenerated)
      ) {
        setScore((score) => score + 1)
      }

      setQuestions(questions.slice(0, -1))
      setIndex(Math.max(-1, index - 1))
    },
    [questions]
  )

  return (
    <div className="absolute inset-0 flex h-full w-full flex-col items-center justify-between p-3">
      <header className="my-4 text-2xl font-bold">
        Is this image generated by AI?
      </header>

      <div className="relative flex flex-1 flex-col items-center justify-center">
        <AnimatePresence>
          {index >= 0 &&
            questions.map((question, i) => (
              <TinderCard
                key={question.id}
                idx={i}
                image={question.imageUrl}
                active={index === i}
                onSwiped={onSwiped}
              />
            ))}
          {index === -1 && (
            <motion.div
              key="end"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="flex flex-col items-center justify-center"
            >
              <h2 className="flex w-full text-xl font-bold text-emerald-500">
                You scored: {score}/{fakeQuestions.length}
              </h2>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
      <main></main>
    </div>
  )
}
